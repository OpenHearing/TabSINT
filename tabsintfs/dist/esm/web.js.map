{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI5C,MAAM,OAAO,YAAa,SAAQ,SAAS;IACzC,KAAK,CAAC,YAAY;QAChB,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;QACnD,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;IAC/B,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,OAAwE;QACvF,OAAO,CAAC,GAAG,CAAC,oCAAoC,EAAE,OAAO,CAAC,CAAC;QAC3D,OAAO,EAAE,GAAG,EAAE,EAAE,EAAE,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,QAAuD;QACjF,OAAO,CAAC,GAAG,CAAC,+CAA+C,CAAC,CAAC;QAC7D,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;IAC7B,CAAC;IAED,KAAK,CAAC,gBAAgB,CAAC,QAAsF;QAC3G,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;QACxD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,QAA2D;QACxE,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC;QAChD,OAAO,EAAE,UAAU,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,EAAC,OAAO,EAAC,EAAE,EAAC,CAAC;IACvE,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAuD;QACtE,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;QAClD,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,wBAAwB,EAAE,CAAC;IAC/D,CAAC;IAED,KAAK,CAAC,oBAAoB,CAAC,QAA6D;QACtF,OAAO,CAAC,GAAG,CAAC,8CAA8C,CAAC,CAAC;QAC5D,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IACvB,CAAC;IAED,KAAK,CAAC,sBAAsB,CAAC,QAA6B;QACxD,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;QAC9D,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IACzB,CAAC;CACF","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { TabsintFsPlugin } from './definitions';\n\nexport class TabsintFsWeb extends WebPlugin implements TabsintFsPlugin {\n  async chooseFolder(): Promise<{ uri: string,name: string }> {\n    console.log('chooseFile from web not implemented');\n    return { uri: '', name: '' };\n  }\n\n  async createPath(options: { rootUri: string | undefined; path: string; content?: string }): Promise<{ uri: string }> {\n    console.log('createPath not implemented for web', options);\n    return { uri: '' };\n  }\n\n  async getDirectoryStructure(_options: { rootUri: string | undefined; path: string }): Promise<{ structure: any }> {\n    console.log('getDirectoryStructure not implemented for web');\n    return { structure: null };\n  }\n\n  async copyFileOrFolder(_options: { rootUri: string | undefined; sourcePath: string; destinationPath: string }): Promise<{ success: boolean; message: string }> {\n    console.log('copyFileOrFolder not implemented for web');\n    return { success: false, message: 'Not implemented on web' };\n  }\n\n  async readFile(_options: { rootUri: string | undefined; filePath: string }): Promise<{ contentUri: string; mimeType: string; name: string; size: number;content:string }> {\n    console.log('readFile not implemented for web');\n    return { contentUri: '', mimeType: '', name: '', size: 0,content:''};\n  }\n\n  async deletePath(_options: { rootUri: string | undefined; path: string }): Promise<{ success: boolean; message: string }> {\n    console.log('deletePath not implemented for web');\n    return { success: false, message: 'Not implemented on web' };\n  }\n\n  async listFilesInDirectory(_options: { rootUri: string | undefined; folderPath: string }): Promise<{ files: { name: string; uri: string; mimeType: string; size: number; content: string }[] }> {\n    console.log('listFilesInDirectory not implemented for web');\n    return { files: [] };\n  }\n\n  async readFileFromContentUri(_options: { fileUri: string }): Promise<{ content: string }> {\n    console.log('readFileFromContentUri not implemented for web');\n    return { content: '' };\n  }\n}\n"]}