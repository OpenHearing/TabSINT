image:
  name: sonarsource/sonar-scanner-cli:latest
  entrypoint: [""]

variables:
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
  GIT_DEPTH: "0"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  IMAGE_TAG_BASE: $CI_REGISTRY_IMAGE

stages:
  - build-docker-image
  - test
  - sonarqube-check
  - beta-release
  - release
  - cleanup

build-docker-image:
  stage: build-docker-image
  image: docker:cli
  services:
    - docker:dind
  tags:
    - docker
    - shell
    - privileged
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - SAFE_COMMIT_REF_NAME=$(echo "$CI_COMMIT_REF_NAME" | tr '/' '-')
    - IMAGE_TAG="$IMAGE_TAG_BASE:$SAFE_COMMIT_REF_NAME"
    - docker build -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
    - if: $CI_COMMIT_BRANCH =~ /^release\/v\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_TAG 

test:
  stage: test
  image: docker:cli
  services:
    - docker:dind
  tags:
    - docker
    - privileged
  dependencies:
    - build-docker-image
  script:
    - SAFE_COMMIT_REF_NAME=$(echo "$CI_COMMIT_REF_NAME" | tr '/' '-')
    - IMAGE_TAG="$IMAGE_TAG_BASE:$SAFE_COMMIT_REF_NAME"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG
    - mkdir -p coverage
    - CONTAINER_ID=$(docker run -d $IMAGE_TAG npm run test:headless)
    - docker wait $CONTAINER_ID
    - docker cp $CONTAINER_ID:/usr/src/app/coverage/lcov.info ./coverage/lcov.info
    - docker stop $CONTAINER_ID
    - docker rm $CONTAINER_ID
  artifacts:
    paths:
      - coverage/lcov.info
    untracked: false
    when: on_success
    access: all
    expire_in: "1 days"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
    # - if: $CI_COMMIT_BRANCH =~ /^release\/v\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_TAG 

sonarqube-check:
  stage: sonarqube-check
  cache:
    policy: pull
    key: "${CI_COMMIT_SHORT_SHA}"
    paths:
      - sonar-scanner/
  dependencies:
    - test
  script:
    - ls coverage/
    - sonar-scanner
  allow_failure: true
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == 'master'
    - if: $CI_COMMIT_BRANCH == 'main'
    - if: $CI_COMMIT_BRANCH == 'develop'
    # - if: $CI_COMMIT_BRANCH =~ /^release\/v\d+\.\d+\.\d+$/
    - if: $CI_COMMIT_TAG 

beta-release:
  stage: beta-release
  image: docker:cli
  services:
    - docker:dind
  tags:
    - docker
    - privileged
  dependencies:
    - build-docker-image
  script:
    - SAFE_COMMIT_REF_NAME=$(echo "$CI_COMMIT_REF_NAME" | tr '/' '-')
    - IMAGE_TAG="$IMAGE_TAG_BASE:$SAFE_COMMIT_REF_NAME"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG
    - mkdir -p android
    - CONTAINER_ID=$(docker run -d $IMAGE_TAG npm run run.build.beta:ci)
    - docker wait $CONTAINER_ID
    - docker exec $CONTAINER_ID ls -la /usr/src/app
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android/app
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android/app/build
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android/app/outputs
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android/app/outputs/apk
    - docker exec $CONTAINER_ID ls -la /usr/src/app/android/app/outputs/apk/debug
    - docker cp $CONTAINER_ID:/usr/src/app/android/app/build/outputs/apk/debug/app-debug.apk ./android/app/
    - docker stop $CONTAINER_ID
    - docker rm $CONTAINER_ID
  artifacts:
    paths:
      - android/app/app-debug.apk
    expire_in: 2 days
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^release\/v\d+\.\d+\.\d+$/
    
release:
  stage: release
  image: docker:cli
  services:
    - docker:dind
  tags:
    - docker
    - privileged
  dependencies:
    - build-docker-image
  script:
    - SAFE_COMMIT_REF_NAME=$(echo "$CI_COMMIT_REF_NAME" | tr '/' '-')
    - IMAGE_TAG="$IMAGE_TAG_BASE:$SAFE_COMMIT_REF_NAME"
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $IMAGE_TAG
    - CONTAINER_ID=$(docker run -d $IMAGE_TAG npm run run.build.production:ci)
    - docker wait $CONTAINER_ID
    - docker cp $CONTAINER_ID:/usr/src/app/android/app/build/outputs/apk/debug/app.apk ./android/app/
    - docker stop $CONTAINER_ID
    - docker rm $CONTAINER_ID
  artifacts:
    paths:
      - android/app/app.apk
    expire_in: 2 days
  rules:
    - if: $CI_COMMIT_TAG 

cleanup:
  stage: cleanup
  script:
    - rm -f ./android/app/app-debug.apk
  rules:
    - if: $CI_JOB_MANUAL
      when: on_success
    - if: $CI_PIPELINE_SOURCE == "web"
      when: manual